# The MIT License (MIT)
# Copyright © 2023 Yuma Rao
# Copyright © 2024 Bitrecs

# Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated
# documentation files (the “Software”), to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
# and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in all copies or substantial portions of
# the Software.

# THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO
# THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL
# THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

import os
import sys
import time
import typing
import bittensor as bt
import template
from datetime import datetime, timezone
from template.base.miner import BaseMinerNeuron
from template.protocol import BitrecsRequest
from template.llms.prompt_factory import PromptFactory
from template.llms.factory import LLM, LLMFactory
from template.utils.uids import best_uid
from dotenv import load_dotenv
load_dotenv()


async def do_work(user_prompt: str, 
                  context: str, 
                  num_recs, 
                  server: LLM, 
                  model: str, 
                  system_prompt="You are a helpful assistant.") -> typing.List[str]:
    """
    Do your miner work here. 
    This function is called by the forward function to generate recs.
    You can use any method you prefer to generate recs. 

    Args:
        user_prompt (str): The user query (generally the SKU they are browsing)
        context (str): The context of the user query - this is set of products to chose from (store catalog)
        num_recs (int): The number of recommendations to generate.
        server (LLM): The LLM server type to query.
        model (str): The LLM model to use.
        system_prompt (str): The system prompt for the LLM.

    Returns:
        typing.List[str]: A list of product recommendations generated by the miner.

    """
    bt.logging.info(f"do_work Prompt: {user_prompt}")
    bt.logging.info(f"do_work LLM server: {server}")  
    bt.logging.info(f"do_work LLM model: {model}")

    factory = PromptFactory(sku=user_prompt, context=context, num_recs=num_recs, load_catalog=False)
    prompt = factory.generate_prompt()    
    system_prompt = "You are a helpful assistant."
    
    try:        
        llm_response = LLMFactory.query_llm(server=server, model=model, system_prompt=system_prompt, temp=0.1, user_prompt=prompt)
        if not llm_response or len(llm_response) < 10:
            bt.logging.error("LLM response is empty.")
            return []

        llm_response = llm_response.replace("```json", "").replace("```", "").strip()
        parsed_recs = PromptFactory.tryparse_llm(llm_response)        
        #bt.logging.trace(f"LLM response: {parsed_recs}")
        return parsed_recs

    except Exception as e:
        bt.logging.error(f"Error calling LLM: {e}")

    return []


class Miner(BaseMinerNeuron):
    """
    Main miner class which generates product recommendations based on incoming requests.
    You are encouraged to modify the do_work function to generate high quality recommendations using whatever method you prefer.

    Default: By default this miner uses OPEN_ROUTER and google/gemini-flash-1.5-8b to generate recommendations.
    
    You can override this by setting the --llm.provider argument in the config.
    For example, --llm.provider OLLAMA_LOCAL will use the local ollama instance to generate recommendations.

    Note: check your .env file for the appropriate API key settings and urls for the LLM provider configured.

    """

    def __init__(self, config=None):
        super(Miner, self).__init__(config=config)

        bt.logging.info(f"\033[1;32m 🐸 Bitrecs Miner started uid: {self.uid}\033[0m")

        try:
            self.llm = self.config.llm.provider
            provider = LLMFactory.try_get_enum(self.llm)
            bt.logging.info(f"\033[1;35m Miner LLM Provider: [{self.llm}]\033[0m")
            self.llm_provider = provider
        except ValueError as ve:
            bt.logging.error(f"Invalid LLM provider: {ve}")
            sys.exit()

        best_performing_uid = best_uid(self.metagraph)        
        if self.uid == best_performing_uid:
            bt.logging.info(f"\033[1;32m 🐸 You are the BEST performing miner in the subnet, keep it up!\033[0m")

        if self.llm_provider == LLM.VLLM:
            bt.logging.info(f"\033[1;35m Please ensure vLLM Server is running\033[0m")


    async def forward(
        self, synapse: BitrecsRequest
    ) -> BitrecsRequest:
        """
        Takes an API request and generates recs

        Args:
            synapse (template.protocol.BitrecsRequest): The synapse object containing the 'BitrecsRequest' data.

        Returns:
            template.protocol.BitrecsRequest: The synapse object with the recs - same object modified with updated fields.

        """
        bt.logging.info("MINER FORWARD PASS {}".format(synapse.query))

        #results =["result1 - superior", "result2 - exalted", "result3 - ornate", "result4 - rare", "result5 - common"]

        results = []
       
        bt.logging.info(f"User Query: {synapse.query }")
        server = self.llm_provider       
        match server:
            case LLM.OLLAMA_LOCAL:
                #model = "llama3.1"
                #model = "nemotron:latest"
                model = "llama3.1:70b"
            case LLM.OPEN_ROUTER:
                #model = "google/gemini-flash-1.5-8b"
                model = "meta-llama/llama-3.1-70b-instruct:free"
            case LLM.CHAT_GPT:
                model = "gpt-4o-mini"
            case LLM.VLLM:
                model = "NousResearch/Meta-Llama-3-8B-Instruct"
                #model = "nvidia/Llama-3.1-Nemotron-70B-Instruct-HF"
            case _:
                bt.logging.error("Unknown LLM server")
                raise ValueError("Unknown LLM server")
        bt.logging.info(f"LLM: {server} - Model: {model}")
      
        context = synapse.context
        num_recs = synapse.num_results
        try:

            results = await do_work(user_prompt=synapse.query, context=context, num_recs=num_recs, server=server, model=model)            
            bt.logging.info(f"LLM {model} - Results: count ({len(results)})")
            
        except Exception as e:            
            bt.logging.error(f"\033[31mFATAL ERROR calling do_work: {e!r} \033[0m")
            pass

        utc_now = datetime.now(timezone.utc)
        created_at = utc_now.strftime("%Y-%m-%dT%H:%M:%S")

        final_results = []
        results = [str(r) for r in results]
        for r in results:
            r = r.rstrip('"').lstrip('"')
            final_results.append(r)
     
        output_synapse=BitrecsRequest(
            name=synapse.name, 
            axon=synapse.axon,
            dendrite=synapse.dendrite,            
            created_at=created_at,
            user=synapse.user,
            num_results=num_recs,
            query=synapse.query,
            context="[]",
            site_key=synapse.site_key,
            results=final_results,
            models_used=[model],
            miner_uid=str(self.uid),
            miner_hotkey=synapse.dendrite.hotkey
        )
        
        bt.logging.info(f"MINER FORWARD PASS RESULT -> {output_synapse}")

        return output_synapse
        

    async def blacklist(
        self, synapse: template.protocol.BitrecsRequest
    ) -> typing.Tuple[bool, str]:
        """
        Determines whether an incoming request should be blacklisted and thus ignored. Your implementation should
        define the logic for blacklisting requests based on your needs and desired security parameters.

        Blacklist runs before the synapse data has been deserialized (i.e. before synapse.data is available).
        The synapse is instead contracted via the headers of the request. It is important to blacklist
        requests before they are deserialized to avoid wasting resources on requests that will be ignored.

        Args:
            synapse (template.protocol.Dummy): A synapse object constructed from the headers of the incoming request.

        Returns:
            Tuple[bool, str]: A tuple containing a boolean indicating whether the synapse's hotkey is blacklisted,
                            and a string providing the reason for the decision.

        This function is a security measure to prevent resource wastage on undesired requests. It should be enhanced
        to include checks against the metagraph for entity registration, validator status, and sufficient stake
        before deserialization of synapse data to minimize processing overhead.

        Example blacklist logic:
        - Reject if the hotkey is not a registered entity within the metagraph.
        - Consider blacklisting entities that are not validators or have insufficient stake.

        In practice it would be wise to blacklist requests from entities that are not validators, or do not have
        enough stake. This can be checked via metagraph.S and metagraph.validator_permit. You can always attain
        the uid of the sender via a metagraph.hotkeys.index( synapse.dendrite.hotkey ) call.

        Otherwise, allow the request to be processed further.
        """

        if synapse.dendrite is None or synapse.dendrite.hotkey is None:
            bt.logging.warning(
                "Received a request without a dendrite or hotkey."
            )
            return True, "Missing dendrite or hotkey"

        # TODO(developer): Define how miners should blacklist requests.
        uid = self.metagraph.hotkeys.index(synapse.dendrite.hotkey)
        if (
            not self.config.blacklist.allow_non_registered
            and synapse.dendrite.hotkey not in self.metagraph.hotkeys
        ):
            # Ignore requests from un-registered entities.
            bt.logging.trace(
                f"Blacklisting un-registered hotkey {synapse.dendrite.hotkey}"
            )
            return True, "Unrecognized hotkey"

        if self.config.blacklist.force_validator_permit:
            # If the config is set to force validator permit, then we should only allow requests from validators.
            if not self.metagraph.validator_permit[uid]:
                bt.logging.warning(
                    f"Blacklisting a request from non-validator hotkey {synapse.dendrite.hotkey}"
                )
                return True, "Non-validator hotkey"

        bt.logging.trace(
            f"Not Blacklisting recognized hotkey {synapse.dendrite.hotkey}"
        )

        bt.logging.debug(
            f"GOOD hotkey {synapse.dendrite.hotkey}"
        )

        return False, "Hotkey recognized!"

    async def priority(self, synapse: template.protocol.BitrecsRequest) -> float:
        """
        The priority function determines the order in which requests are handled. More valuable or higher-priority
        requests are processed before others. You should design your own priority mechanism with care.

        This implementation assigns priority to incoming requests based on the calling entity's stake in the metagraph.

        Args:
            synapse (template.protocol.Dummy): The synapse object that contains metadata about the incoming request.

        Returns:
            float: A priority score derived from the stake of the calling entity.

        Miners may receive messages from multiple entities at once. This function determines which request should be
        processed first. Higher values indicate that the request should be processed first. Lower values indicate
        that the request should be processed later.

        Example priority logic:
        - A higher stake results in a higher priority value.
        """
        if synapse.dendrite is None or synapse.dendrite.hotkey is None:
            bt.logging.warning(
                "Received a request without a dendrite or hotkey."
            )
            return 0.0

        # TODO(developer): Define how miners should prioritize requests.
        caller_uid = self.metagraph.hotkeys.index(
            synapse.dendrite.hotkey
        )  # Get the caller index.
        priority = float(
            self.metagraph.S[caller_uid]
        )  # Return the stake as the priority.
        bt.logging.debug(
            f"Prioritizing {synapse.dendrite.hotkey} with value: {priority}"
        )
        return priority
    
    def save_state(self):        
        pass

# This is the main function, which runs the miner.
if __name__ == "__main__":
    with Miner() as miner:
        start_time = time.time()
        while True:
            bt.logging.info(f"Miner running... {time.time()}")
            elapsed_time = int(time.time() - start_time)
            if elapsed_time % 30 == 0:
                bt.logging.info(f"Miner is configured for {miner.llm_provider}")                
            time.sleep(15)
